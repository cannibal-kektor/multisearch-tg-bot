## TLS listeners are configured in the same fashion as TCP listeners,
## including the option to control the choice of interface.
##
listeners.ssl.default = 5671

## It is possible to disable regular TCP (non-TLS) listeners. Clients
## not configured to use TLS and the correct TLS-enabled port won't be able
## to connect to this node.

##listeners.tcp = none
listeners.tcp = none

ssl_options.verify               = verify_peer
##ssl_options.verify               = verify_none
ssl_options.fail_if_no_peer_cert = true
# Certificate and key file locations
ssl_options.cacertfile = /etc/rabbitmq/conf/certs/ca.pem
ssl_options.certfile   = /etc/rabbitmq/conf/certs/rabbit01.pem
ssl_options.keyfile    = /etc/rabbitmq/conf/certs/rabbit01.key

## Limits what TLS versions the server enables for client TLS
## connections. See https://www.rabbitmq.com/ssl.html#tls-versions for details.
##
## Cutting edge TLS version which requires recent client runtime
## versions and has no cipher suite in common with earlier TLS versions.
##ssl_options.versions.1 = tlsv1.3

##ssl_options.ciphers.1  = TLS_AES_256_GCM_SHA384
##ssl_options.ciphers.2  = TLS_AES_128_GCM_SHA256
##ssl_options.ciphers.3  = TLS_CHACHA20_POLY1305_SHA256
##ssl_options.ciphers.4  = TLS_AES_128_CCM_SHA256
##ssl_options.ciphers.5  = TLS_AES_128_CCM_8_SHA256

##ssl_options.honor_cipher_order   = true
##ssl_options.honor_ecc_order      = true



## allow access to the guest user from anywhere on the network
## https://www.rabbitmq.com/access-control.html#loopback-users
## https://www.rabbitmq.com/production-checklist.html#users
loopback_users.guest = false

## Send all logs to stdout/TTY. Necessary to see logs when running via
## a container
log.console = true

log.console.level = debug
##log.console.formatter = json

#Logging to a file can be deactivated with
log.file=false

## Authentication

## The rabbitmq-auth-mechanism-ssl plugin makes it possible to
## authenticate a user based on the client's x509 (TLS) certificate.
## Related doc guide: https://www.rabbitmq.com/docs/authentication.
##
## To use auth-mechanism-ssl, the EXTERNAL mechanism should
## be enabled:
##
auth_mechanisms.1 = PLAIN
auth_mechanisms.2 = AMQPLAIN
auth_mechanisms.3 = EXTERNAL

## To force x509 certificate-based authentication on all clients,
## exclude all other mechanisms (note: this will disable password-based
## authentication even for the management UI!):
##
# auth_mechanisms.1 = EXTERNAL

## This pertains to both the rabbitmq-auth-mechanism-ssl plugin and
## STOMP ssl_cert_login configurations. See the RabbitMQ STOMP plugin
## configuration section later in this file and the README in
## https://github.com/rabbitmq/rabbitmq-auth-mechanism-ssl for further
## details.
##
## To use the TLS cert's CN instead of its DN as the username
##
ssl_cert_login_from   = common_name

## TLS handshake timeout, in milliseconds.
##
# ssl_handshake_timeout = 5000

## Select an authentication/authorisation backend to use.
##
## Alternative backends are provided by plugins, such as rabbitmq-auth-backend-ldap.
##
## NB: These settings require certain plugins to be enabled.
##
## Related doc guides:
##
##  * https://www.rabbitmq.com/docs/plugins
##  * https://www.rabbitmq.com/docs/access-control
##

# auth_backends.1   = rabbit_auth_backend_internal

## uses separate backends for authentication and authorisation,
## see below.
# auth_backends.1.authn = rabbit_auth_backend_ldap
# auth_backends.1.authz = rabbit_auth_backend_internal

## The rabbitmq_auth_backend_ldap plugin allows the broker to
## perform authentication and authorisation by deferring to an
## external LDAP server.
##
## Relevant doc guides:
##
## * https://www.rabbitmq.com/docs/ldap
## * https://www.rabbitmq.com/docs/access-control
##
## uses LDAP for both authentication and authorisation
# auth_backends.1 = rabbit_auth_backend_ldap

## uses HTTP service for both authentication and
## authorisation
# auth_backends.1 = rabbit_auth_backend_http

## uses two backends in a chain: HTTP first, then internal
# auth_backends.1   = rabbit_auth_backend_http
# auth_backends.2   = rabbit_auth_backend_internal


##
## Loading Definitions
## ====================
##
## Relevant documentation: https://www.rabbitmq.com/definitions.html#import-on-boot
##
## To import definitions from a local file on node boot, set the
## load_definitions config key to a path of a previously exported
## JSON file with definitions. Does not require management plugin
## to be enabled.
##
definitions.import_backend = local_filesystem
definitions.local.path = /etc/rabbitmq/conf/setup_definition.json

# when set to true, definition import will only happen
# if definition file contents change
definitions.skip_if_unchanged = true

## Password hashing implementation. Will only affect newly
## created users. To recalculate hash for an existing user
## it's necessary to update her password.
##
## To use SHA-512, set to rabbit_password_hashing_sha512.
##
# password_hashing_module = rabbit_password_hashing_sha256

## When importing definitions exported from versions earlier
## than 3.6.0, it is possible to go back to MD5 (only do this
## as a temporary measure!) by setting this to rabbit_password_hashing_md5.
##
# password_hashing_module = rabbit_password_hashing_md5


# =======================================
# Management section
# =======================================

## Preload schema definitions from the following JSON file.
## Related doc guide: https://www.rabbitmq.com/docs/management#load-definitions.
##
# management.load_definitions = /path/to/exported/definitions.json

## Log all requests to the management HTTP API to a file.
##
# management.http_log_dir = /path/to/access.log

## HTTP listener and embedded Web server settings.
# ## See https://www.rabbitmq.com/docs/management for details.
#
# management.tcp.port = 15672
# management.tcp.ip   = 0.0.0.0
#
# management.tcp.shutdown_timeout   = 7000
# management.tcp.max_keepalive      = 120
# management.tcp.idle_timeout       = 120
# management.tcp.inactivity_timeout = 120
# management.tcp.request_timeout    = 120
# management.tcp.compress           = true

## HTTPS listener settings.
## See https://www.rabbitmq.com/docs/management and https://www.rabbitmq.com/docs/ssl for details.
##

management.ssl.port       = 15671
management.ssl.ip         = 0.0.0.0
management.ssl.cacertfile = /etc/rabbitmq/conf/certs/ca.pem
management.ssl.certfile   = /etc/rabbitmq/conf/certs/rabbit01.pem
management.ssl.keyfile    = /etc/rabbitmq/conf/certs/rabbit01.key
## This key must only be used if private key is password protected
# management.ssl.password   = bunnies

## More TLS options
# management.ssl.honor_cipher_order   = true
# management.ssl.honor_ecc_order      = true

## These are highly recommended for TLSv1.2 but cannot be used
## with TLSv1.3. If TLSv1.3 is enabled, these lines MUST be removed.
# management.ssl.client_renegotiation = false
# management.ssl.secure_renegotiate   = true

## Supported TLS versions
# management.ssl.versions.1 = tlsv1.2

## Cipher suites the server is allowed to use
# management.ssl.ciphers.1 = ECDHE-ECDSA-AES256-GCM-SHA384
# management.ssl.ciphers.2 = ECDHE-RSA-AES256-GCM-SHA384
# management.ssl.ciphers.3 = ECDHE-ECDSA-AES256-SHA384
# management.ssl.ciphers.4 = ECDHE-RSA-AES256-SHA384
# management.ssl.ciphers.5 = ECDH-ECDSA-AES256-GCM-SHA384
# management.ssl.ciphers.6 = ECDH-RSA-AES256-GCM-SHA384
# management.ssl.ciphers.7 = ECDH-ECDSA-AES256-SHA384
# management.ssl.ciphers.8 = ECDH-RSA-AES256-SHA384
# management.ssl.ciphers.9 = DHE-RSA-AES256-GCM-SHA384

## URL path prefix for HTTP API and management UI
# management.path_prefix = /a-prefix

## One of 'basic', 'detailed' or 'none'. See
## https://www.rabbitmq.com/docs/management#fine-stats for more details.
# management.rates_mode = basic

## Configure how long aggregated data (such as message rates and queue
## lengths) is retained. Please read the plugin's documentation in
## https://www.rabbitmq.com/docs/management#configuration for more
## details.
## Your can use 'minute', 'hour' and 'day' keys or integer key (in seconds)
# management.sample_retention_policies.global.minute    = 5
# management.sample_retention_policies.global.hour  = 60
# management.sample_retention_policies.global.day = 1200

# management.sample_retention_policies.basic.minute   = 5
# management.sample_retention_policies.basic.hour = 60

# management.sample_retention_policies.detailed.10 = 5

#management.hsts.policy = max-age=31536000; includeSubDomains
#management.csp.policy = default-src 'self'; script-src 'self' 'unsafe-eval'
#management.headers.content_type_options = nosniff
#management.headers.xss_protection = 1; mode=block
#management.headers.frame_options = DENY
#management.login_session_timeout = 60
# Disable stats ? https://www.rabbitmq.com/docs/management#disable-stats