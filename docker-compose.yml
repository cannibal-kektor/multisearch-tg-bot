name: multisearch

services:

  multisearchBot:
    build:
      context: ./app
#      no_cache: true
      dockerfile: ./bot/Dockerfile
      additional_contexts:
        - cert_conf=conf/cert
      args:
        - BOT_USERNAME=${BOT_USERNAME}
        - BOT_TOKEN=${BOT_TOKEN}
        - BOT_CREATOR=${BOT_CREATOR}
    depends_on:
      rabbit01:
        condition: service_healthy
      elastic01:
        condition: service_healthy
      mongo01:
        condition: service_healthy
      setup-mongo:
        condition: service_completed_successfully
      elastic-agent:
        condition: service_started
    image: multisearch-telegram-bot
    healthcheck:
      test: ["CMD-SHELL", "test -f /tmp/healthy || exit 1"]
      interval: 30s
      timeout: 5s
    environment:
      - BOT_USERNAME=${BOT_USERNAME}
      - BOT_TOKEN=${BOT_TOKEN}
      - BOT_CREATOR=${BOT_CREATOR}
      - AUTH_PATH=${AUTH_PATH}
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - app-client-cert:/${AUTH_PATH}:ro
    labels:
      - "monitor-ecs"
    networks:
      - rabbitmq-net
      - mongo-net
      - elastic-net

  multisearchProcessor:
    build:
      context: ./app
#      no_cache: true
      dockerfile: ./processor/Dockerfile
      additional_contexts:
        - cert_conf=conf/cert
      args:
        - BOT_USERNAME=${BOT_USERNAME}
        - BOT_TOKEN=${BOT_TOKEN}
        - BOT_CREATOR=${BOT_CREATOR}
#    deploy:
#      replicas: 2
    depends_on:
      rabbit01:
        condition: service_healthy
      elastic01:
        condition: service_healthy
      mongo01:
        condition: service_healthy
      setup-mongo:
        condition: service_completed_successfully
      elastic-agent:
        condition: service_started
    image: multisearch-processor
    healthcheck:
      test: ["CMD-SHELL", "test -f /tmp/healthy || exit 1"]
      interval: 30s
      timeout: 5s
    environment:
      - BOT_USERNAME=${BOT_USERNAME}
      - BOT_TOKEN=${BOT_TOKEN}
      - BOT_CREATOR=${BOT_CREATOR}
      - AUTH_PATH=${AUTH_PATH}
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - app-client-cert:/${AUTH_PATH}:ro
    labels:
      - "monitor-ecs"
    networks:
      - rabbitmq-net
      - mongo-net
      - elastic-net

  setup-certificate:
    image: alpine/openssl:3.3.3
    restart: "no"
    volumes:
      - ./conf/cert:/opt/conf:ro
      -  ca-cert:/opt/ca
      -  rabbit-cert:/opt/rabbit
      -  mongo-cert:/opt/mongo
      -  elastic-cert:/opt/elastic
      -  kibana-cert:/opt/kibana
      -  agent-cert:/opt/agent
      -  app-client-cert:/opt/app
    working_dir: /opt
    labels:
      - "monitor-non-ecs"
    entrypoint: [ "sh", "conf/initCertificates.sh"]

  rabbit01:
    image: rabbitmq:3-management
    hostname: rabbit01
    container_name: rabbit01
    depends_on:
      setup-certificate:
        condition: service_completed_successfully
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/
      - ./conf/rabbit/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./conf/rabbit/enabled_plugins:/etc/rabbitmq/enabled_plugins:ro
      - ./conf/rabbit/setup_definition.json:/etc/rabbitmq/conf/setup_definition.json:ro
      - rabbit-cert:/etc/rabbitmq/conf/certs:ro
    labels:
      - "monitor-non-ecs"
#    entrypoint: [ "sleep", "1000000000"]
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - 15671:15671
      - 5671:5671
    networks:
      - rabbitmq-net

  setup-mongo:
    image: mongo
    depends_on:
      mongo01:
        condition: service_healthy
    restart: "no"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    labels:
      - "monitor-non-ecs"
    volumes:
      - ./conf/mongo/mongo-setup.sh:/scripts/mongo-setup.sh:ro
      - mongo-cert:/etc/ssl/mongo:ro
    entrypoint: [ "bash", "/scripts/mongo-setup.sh"]
    networks:
      - mongo-net

  mongo01:
    image: mongo
    hostname: mongo01
    container_name: mongo01
    depends_on:
      setup-certificate:
        condition: service_completed_successfully
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    command: ["mongod","--config", "/etc/mongod.conf"]
    healthcheck:
      test: >
        echo 'db.runCommand("ping").ok' | mongosh --host mongo01:27017
        -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD} 
        --quiet --tls --tlsCAFile /etc/ssl/mongo/ca.pem --authenticationDatabase admin --eval
      interval: 5s
      timeout: 30s
      start_period: 10s
      start_interval: 1s
      retries: 5
    labels:
      - "monitor-non-ecs"
    volumes:
      - mongo-data:/data/db
      - ./conf/mongo/mongod.conf:/etc/mongod.conf:ro
      - ./conf/mongo/mongo-create-user.js:/docker-entrypoint-initdb.d/mongo-create-user.js:ro
      - mongo-cert:/etc/ssl/mongo:ro
    networks:
      - mongo-net

  setup-elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    depends_on:
      elastic01:
        condition: service_healthy
    restart: "no"
    labels:
      - "monitor-non-ecs"
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    volumes:
      - ./conf/elastic/elasticSetup.sh:/usr/share/elasticsearch/config/elasticSetup.sh:ro
      - elastic-cert:/usr/share/elasticsearch/config/certs:ro
    command: >
      bash config/elasticSetup.sh
    networks:
      - elastic-net
      
  elastic01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    depends_on:
      setup-certificate:
        condition: service_completed_successfully
    hostname: elastic01
    container_name: elastic01
    environment:
      - ES_PORT=${ES_PORT}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - es-data01:/usr/share/elasticsearch/data
      - ./conf/elastic/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - elastic-cert:/usr/share/elasticsearch/config/certs:ro
    labels:
      - "monitor-ecs"
    ports:
      - ${ES_PORT}:9200
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: >
        curl -s --cert config/certs/elastic01.pem --key config/certs/elastic01.key
        --cacert config/certs/ca.pem https://localhost:9200 |
        grep -q 'missing authentication credentials'
      interval: 10s
      timeout: 10s
      retries: 5
    
    networks:
      - elastic-net


  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    depends_on:
      setup-elastic:
        condition: service_completed_successfully
    hostname: kibana
    container_name: kibana
    labels:
      - "monitor-ecs"
    volumes:
      - kibana-data:/usr/share/kibana/data
      - ./conf/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - kibana-cert:/usr/share/kibana/config/certs:ro
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - KIBANA_USERNAME=${KIBANA_USERNAME}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test: >
        curl -s -I --cacert config/certs/ca.pem https://localhost:5601 |
        grep -q 'HTTP/1.1 302 Found'
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - elastic-net


  elastic-agent:
    image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
    container_name: elastic-agent
    hostname: elastic-agent
    depends_on:
      kibana:
        condition: service_healthy
      elastic01:
        condition: service_healthy
    user: root
    environment:
      #https://www.elastic.co/docs/reference/fleet/agent-environment-variables
      - FLEET_SERVER_ENABLE=1
      - FLEET_SERVER_ELASTICSEARCH_HOST=https://elastic01:9200
      - FLEET_SERVER_ELASTICSEARCH_CA=/usr/share/elastic-agent/certs/ca.pem
      - FLEET_SERVER_ES_CERT=/usr/share/elastic-agent/certs/agent.pem
      - FLEET_SERVER_ES_CERT_KEY=/usr/share/elastic-agent/certs/agent.key
      - FLEET_SERVER_POLICY_ID=agent-collector-policy
      - KIBANA_FLEET_SETUP=1
      - KIBANA_FLEET_HOST=https://kibana:5601
      - KIBANA_FLEET_USERNAME=${ELASTIC_USERNAME}
      - KIBANA_FLEET_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_FLEET_CA=/usr/share/elastic-agent/certs/ca.pem
      - FLEET_SERVER_CERT=/usr/share/elastic-agent/certs/agent.pem
      - FLEET_SERVER_CERT_KEY=/usr/share/elastic-agent/certs/agent.key
      - FLEET_SERVER_PORT=8220
      - FLEET_URL=https://elastic-agent:8220
      - FLEET_CA=/usr/share/elastic-agent/certs/ca.pem
    healthcheck:
      test: >
        curl -s --cacert /usr/share/elastic-agent/certs/ca.pem https://localhost:8220/api/status |
        grep -q 'HEALTHY'
      interval: 15s
      timeout: 10s
      retries: 10
    volumes:
      - elastic-agent-data:/usr/share/elastic-agent
      - agent-cert:/usr/share/elastic-agent/certs:ro
      - ca-cert:/usr/local/share/ca-certificates:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
#      - ./certificates/ca/ca.pem:/etc/ssl/certs/ca.pem
    entrypoint:
      - bash
      - -c
      - |
        update-ca-certificates
        /usr/bin/tini -- /usr/local/bin/docker-entrypoint $@
    networks:
      - elastic-net
      - rabbitmq-net
      - mongo-net

networks:
  rabbitmq-net:
  mongo-net:
  elastic-net:

volumes:
  ca-cert:
  rabbit-cert:
  mongo-cert:
  elastic-cert:
  kibana-cert:
  agent-cert:
  app-client-cert:
  rabbitmq-data:
  mongo-data:
  es-data01:
  kibana-data:
  elastic-agent-data:
