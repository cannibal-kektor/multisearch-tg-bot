name: multisearch

services:

  multisearchBot:
    build:
      context: ./app
      dockerfile: ./bot/Dockerfile
      additional_contexts:
        cert_conf: conf/build
      secrets:
        - bot_credentials
    depends_on:
      rabbit01:
        condition: service_healthy
      elastic01:
        condition: service_healthy
      mongo01:
        condition: service_healthy
      setup-mongo:
        condition: service_completed_successfully
      elastic-agent:
        condition: service_started
    image: multisearch-telegram-bot
    healthcheck:
      test: [ "CMD-SHELL", "test -f /tmp/healthy || exit 1" ]
      interval: 30s
      timeout: 5s
    secrets:
      - source: bot_credentials
        target: /run/secrets/bot_credentials
        uid: "1000"
        gid: "1000"
        mode: 0400
    environment:
      SPRING_CONFIG_IMPORT: file:/run/secrets/bot_credentials[.properties]
    volumes:
      - app-client-cert:/app/certs:ro
    labels:
      - "monitor-ecs"
    networks:
      - rabbitmq-net
      - mongo-net
      - elastic-net

  multisearchProcessor:
    build:
      context: ./app
      dockerfile: ./processor/Dockerfile
      additional_contexts:
        cert_conf: conf/build
      secrets:
        - bot_credentials
    #    deploy:
    #      replicas: 2
    depends_on:
      rabbit01:
        condition: service_healthy
      elastic01:
        condition: service_healthy
      mongo01:
        condition: service_healthy
      setup-mongo:
        condition: service_completed_successfully
      elastic-agent:
        condition: service_started
    image: multisearch-processor
    healthcheck:
      test: [ "CMD-SHELL", "test -f /tmp/healthy || exit 1" ]
      interval: 30s
      timeout: 5s
    secrets:
      - source: bot_credentials
        target: /run/secrets/bot_credentials
        uid: "1000"
        gid: "1000"
        mode: 0400
    environment:
      SPRING_CONFIG_IMPORT: file:/run/secrets/bot_credentials[.properties]
    volumes:
      - app-client-cert:/app/certs:ro
    labels:
      - "monitor-ecs"
    networks:
      - rabbitmq-net
      - mongo-net
      - elastic-net

  setup-certificate:
    image: alpine/openssl:3.3.3
    restart: "no"
    volumes:
      - ./conf/cert:/opt/conf:ro
      - ca-cert:/opt/ca
      - rabbit-cert:/opt/rabbit
      - mongo-cert:/opt/mongo
      - elastic-cert:/opt/elastic
      - kibana-cert:/opt/kibana
      - agent-cert:/opt/agent
      - app-client-cert:/opt/app
    secrets:
      - rabbit_credentials
      - mongo_credentials
    working_dir: /opt
    labels:
      - "monitor-non-ecs"
    entrypoint: [ "sh", "conf/initCertificates.sh" ]

  rabbit01:
    image: rabbitmq:3-management
    hostname: rabbit01
    container_name: rabbit01
    depends_on:
      setup-certificate:
        condition: service_completed_successfully
    secrets:
      - rabbit_credentials
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/
      - rabbit-cert:/opt/rabbit/certs:ro
      - ./conf/rabbit:/etc/rabbitmq:ro
    ports:
      - ${RABBIT_MANAGEMENT_PORT}:15671
      - ${RABBIT_PORT}:5671
    labels:
      - "monitor-non-ecs"
    entrypoint: [ "sh", "/etc/rabbitmq/entrypoint.sh" ]
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - rabbitmq-net

  mongo01:
    image: mongo
    hostname: mongo01
    container_name: mongo01
    depends_on:
      setup-certificate:
        condition: service_completed_successfully
    ports:
      - ${MONGO_PORT}:27017
    healthcheck:
      test: ["CMD-SHELL", "/etc/mongo/healthcheck.sh"]
      interval: 15s
      timeout: 10s
      start_period: 20s
      start_interval: 2s
      retries: 3
    labels:
      - "monitor-non-ecs"
    secrets:
      - mongo_credentials
    volumes:
      - mongo-data:/data/db
      - mongo-cert:/etc/ssl/mongo:ro
      - ./conf/mongo:/etc/mongo:ro
    entrypoint: [ "/etc/mongo/entrypoint.sh" ]
    command: [ "mongod","--config", "/etc/mongo/mongod.conf" ]
    networks:
      - mongo-net

  setup-mongo:
    image: mongo
    depends_on:
      mongo01:
        condition: service_healthy
    restart: "no"
    labels:
      - "monitor-non-ecs"
    secrets:
      - mongo_credentials
    volumes:
      - ./conf/mongo/mongo-replica-setup.sh:/scripts/mongo-replica-setup.sh:ro
      - mongo-cert:/etc/ssl/mongo:ro
    entrypoint: [ "bash", "/scripts/mongo-replica-setup.sh" ]
    networks:
      - mongo-net

  elastic01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    depends_on:
      setup-certificate:
        condition: service_completed_successfully
    hostname: elastic01
    container_name: elastic01
    environment:
      ES_PORT: ${ES_PORT}
    volumes:
      - es-data01:/usr/share/elasticsearch/data
      - ./conf/elastic/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
#      - ./conf/elastic/elasticSetup.sh:/usr/share/elasticsearch/config/init/elasticSetup.sh:ro
      - ./conf/elastic/entrypoint.sh:/etc/elastic/entrypoint.sh:ro
      - ./conf/elastic/healthcheck.sh:/etc/elastic/healthcheck.sh:ro
      - elastic-cert:/usr/share/elasticsearch/config/certs:ro
    secrets:
      - elastic_credentials
    labels:
      - "monitor-ecs"
    ports:
      - ${ES_PORT}:9200
    entrypoint: [ "bash", "/etc/elastic/entrypoint.sh" ]
    healthcheck:
      test: ["CMD", "/etc/elastic/healthcheck.sh"]
      interval: 10s
      timeout: 35s
      retries: 5
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - elastic-net

  setup-elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    depends_on:
      elastic01:
        condition: service_healthy
    restart: "no"
    labels:
      - "monitor-non-ecs"
    volumes:
      - ./conf/elastic/elasticSetup.sh:/usr/share/elasticsearch/config/elasticSetup.sh:ro
      - elastic-cert:/usr/share/elasticsearch/config/certs:ro
    secrets:
      - elastic_credentials
      - kibana_credentials
    command: >
      bash config/elasticSetup.sh
    networks:
      - elastic-net


  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    depends_on:
      setup-elastic:
        condition: service_completed_successfully
    hostname: kibana
    container_name: kibana
    labels:
      - "monitor-ecs"
    volumes:
      - kibana-data:/usr/share/kibana/data
      - ./conf/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - ./conf/kibana/entrypoint.sh:/etc/kibana/entrypoint.sh:ro
      - kibana-cert:/usr/share/kibana/config/certs:ro
    secrets:
      - kibana_credentials
      - rabbit_credentials
    ports:
      - ${KIBANA_PORT}:5601
    entrypoint: [ "sh", "/etc/kibana/entrypoint.sh" ]
    healthcheck:
      test: >
        curl -s --cacert config/certs/ca.pem https://localhost:5601/api/status?v8format=true | 
        grep -q '\"overall\":{\"level\":\"available\"'
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    mem_limit: ${MEM_LIMIT}
    networks:
      - elastic-net


  elastic-agent:
    image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
    container_name: elastic-agent
    hostname: elastic-agent
    depends_on:
      kibana:
        condition: service_healthy
      elastic01:
        condition: service_healthy
    user: root
    environment:
      #https://www.elastic.co/docs/reference/fleet/agent-environment-variables
      FLEET_SERVER_ENABLE: 1
      FLEET_SERVER_ELASTICSEARCH_HOST: https://elastic01:9200
      FLEET_SERVER_ELASTICSEARCH_CA: /usr/share/elastic-agent/certs/ca.pem
      FLEET_SERVER_ES_CERT: /usr/share/elastic-agent/certs/agent.pem
      FLEET_SERVER_ES_CERT_KEY: /usr/share/elastic-agent/certs/agent.key
      FLEET_SERVER_POLICY_ID: agent-collector-policy
      KIBANA_FLEET_SETUP: 1
      KIBANA_FLEET_HOST: https://kibana:5601
      KIBANA_FLEET_CA: /usr/share/elastic-agent/certs/ca.pem
      FLEET_SERVER_CERT: /usr/share/elastic-agent/certs/agent.pem
      FLEET_SERVER_CERT_KEY: /usr/share/elastic-agent/certs/agent.key
      FLEET_SERVER_PORT: 8220
      FLEET_URL: https://elastic-agent:8220
      FLEET_CA: /usr/share/elastic-agent/certs/ca.pem
    healthcheck:
      test: >
        curl -s --cacert /usr/share/elastic-agent/certs/ca.pem https://localhost:8220/api/status |
        grep -q 'HEALTHY'
      interval: 15s
      timeout: 10s
      retries: 10
    volumes:
      - elastic-agent-data:/usr/share/elastic-agent
      - agent-cert:/usr/share/elastic-agent/certs:ro
      - ca-cert:/usr/local/share/ca-certificates:ro
      - ./conf/agent/entrypoint.sh:/etc/agent/entrypoint.sh:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    #      - ./certificates/ca/ca.pem:/etc/ssl/certs/ca.pem
    secrets:
      - elastic_credentials
    entrypoint: [ "sh", "/etc/agent/entrypoint.sh" ]
    networks:
      - elastic-net
      - rabbitmq-net
      - mongo-net

networks:
  rabbitmq-net:
  mongo-net:
  elastic-net:

volumes:
  ca-cert:
  rabbit-cert:
  mongo-cert:
  elastic-cert:
  kibana-cert:
  agent-cert:
  app-client-cert:
  rabbitmq-data:
  mongo-data:
  es-data01:
  kibana-data:
  elastic-agent-data:

secrets:
  bot_credentials:
    file: ./secret/bot.secret
  rabbit_credentials:
    file: ./secret/rabbit.secret
  mongo_credentials:
    file: ./secret/mongo.secret
  elastic_credentials:
    file: ./secret/elastic.secret
  kibana_credentials:
    file: ./secret/kibana.secret
